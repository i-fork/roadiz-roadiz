services:
    db_test:
        build:
            # Custom image for file permissions
#            context: ./docker/mysql
            context: ./docker/postgres
            #context: ./docker/mariadb
            args:
                USER_UID: ${USER_UID}
        networks:
            default:
        volumes:
            - "./.data/db_test:/var/lib/mysql:delegated"
            - "./docker/mysql/performances.cnf:/etc/mysql/conf.d/performances.cnf"
            - "./.data/pgsql_test:/var/lib/postgresql/data:delegated"
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}_test
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            # Enable easy switching with Postgres
            PGDATA: /var/lib/postgresql/data
            POSTGRES_USER: ${MYSQL_USER}
            POSTGRES_PASSWORD: ${MYSQL_PASSWORD}
            POSTGRES_DB: ${MYSQL_DATABASE}_test

    db:
        build:
            # Custom image for file permissions
            context: ./docker/mysql
            #context: ./docker/postgres
            #context: ./docker/mariadb
            args:
                USER_UID: ${USER_UID}
        networks:
            default:
        volumes:
            - "./.data/db:/var/lib/mysql:delegated"
            - "./docker/mysql/performances.cnf:/etc/mysql/conf.d/performances.cnf"
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}

    pma:
        image: phpmyadmin/phpmyadmin
        ports:
            - ${PUBLIC_PMA_PORT}:80/tcp
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_pma
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_pma.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_pma.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.rule=Host(${HOSTNAME_PMA})"
            - "traefik.http.routers.${APP_NAMESPACE}_pma.service=${APP_NAMESPACE}_pma"

    app:
        # Need to pass all vars to docker env for Crontab and supervisor scripts
        env_file: "./.env"
        build:
            #context: ./docker/php72-nginx-alpine
            #context: ./docker/php73-nginx-alpine
            #context: ./docker/php74-nginx-alpine
            #context: ./docker/php80-nginx-alpine
            context: ./docker/php81-nginx-alpine
            args:
                USER_UID: ${USER_UID}
        ports:
            - ${PUBLIC_APP_PORT}:80/tcp
        depends_on:
            - db
            - db_test
            - solr
        links:
            - db:db
            - solr:solr
        volumes:
            - ./:/var/www/html:cached
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_app
            default:
        environment:
            APP_CACHE: ${APP_CACHE}
            TRUSTED_PROXIES: ${TRUSTED_PROXIES}
            USER_UID: ${USER_UID}
            DEFAULT_GATEWAY: ${DEFAULT_GATEWAY}

        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}.rule=Host(${HOSTNAME})"
            - "traefik.http.routers.${APP_NAMESPACE}.service=${APP_NAMESPACE}"

    mailer:
        image: mailhog/mailhog
        ports:
            - ${PUBLIC_MAILER_PORT}:8025/tcp
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_mailer
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.server.port=8025"
            - "traefik.http.services.${APP_NAMESPACE}_mailer.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.rule=Host(${HOSTNAME_MAILER})"
            - "traefik.http.routers.${APP_NAMESPACE}_mailer.service=${APP_NAMESPACE}_mailer"

    varnish:
        build:
            context: ./docker/varnish
        tmpfs: /usr/local/var/varnish:exec
        depends_on:
            - app
        links:
            - app:app
        ports:
            - ${PUBLIC_VARNISH_PORT}:80/tcp
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_varnish
            default:
                aliases:
                    - varnish
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.server.port=80"
            - "traefik.http.services.${APP_NAMESPACE}_varnish.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.rule=Host(${HOSTNAME_VARNISH})"
            - "traefik.http.routers.${APP_NAMESPACE}_varnish.service=${APP_NAMESPACE}_varnish"

    solr:
        build:
            # Custom image for file permissions
            context: ./docker/solr
            args:
                USER_UID: ${USER_UID}
        ports:
            - "${PUBLIC_SOLR_PORT}:8983/tcp"
        volumes:
            - "./.data/solr:/var/solr:delegated"
        environment:
            SOLR_UID: ${USER_UID}
            SOLR_GID: ${USER_UID}
        command:
            - solr-precreate
            - ${SOLR_CORE_NAME}
        networks:
            frontproxynet:
                aliases:
                    - ${APP_NAMESPACE}_solr
            default:
        labels:
            - "traefik.enable=true"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.scheme=http"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.server.port=8983"
            - "traefik.http.services.${APP_NAMESPACE}_solr.loadbalancer.passhostheader=true"
            # Listen HTTP
            - "traefik.http.routers.${APP_NAMESPACE}_solr.entrypoints=http"
            - "traefik.http.routers.${APP_NAMESPACE}_solr.rule=Host(${HOSTNAME_SOLR})"
            - "traefik.http.routers.${APP_NAMESPACE}_solr.service=${APP_NAMESPACE}_solr"

networks:
    frontproxynet:
        external: true
    # If you need to use port forwarding, fixing default gateway can be useful
    # to keep same host IP address between service restarts
    default:
        ipam:
            driver: default
            config:
                -   subnet: ${DEFAULT_GATEWAY}/16
